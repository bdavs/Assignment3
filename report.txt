For part 1, When the two process get forked, they share a value in shared memory. This shared value allows them to be able to access the same number and work together to increment it to the correct number. On my computer, I found that the 2 processess seemed to get to the correct value a large number of times. These were also running concurrently because they reported their respective values to be zero before entering their sections and thus acessed them together. The value may not be exactly the correct value due to the child process may be exiting early or an error could cause the shared memory value to not increment. 
For part 2, The processes editing the shared memory do not always seem to get exactly to zero because of the fact that many different processes are trying to access the same memory and therefore must be switched between in order to do it. This could result in a few processes taking over most of the operations and leaving the values nonzero.
